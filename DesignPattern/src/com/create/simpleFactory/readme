简单工厂模式将一系列类似对象的创建放在一个类中

如果有新需求，
1 创建新需求类NewType（实现相应的接口Type）
2 创建新的简单工厂类（该简单工厂类继承原来的简单工厂类）
3 在新疆的简单工厂类中重写相应的方法，如下
	@Override
	public Type getInstance(int type)
	{
		if( type == 3) return new NewType();
		else return super.getInstance(type);
	}

这样会产生一个问题：每次有新的需求就要创建新的工厂类，在需要新需求的地方使用新工厂类，这样整个项目中可能到处充斥着新工厂和旧工厂以及旧工厂之前的旧工厂；如果不这样做，
我们可以在原来的工厂中添加分支语句，但这样的话，工厂类将变得越来越大并且这样做也不符合软件工程的开闭原则。将那么我们可以在工厂类中采用反射技术来解决这个问题

   public Object getInstance(String class_name_complete)
   {
   		return class。forName( class_name_complete );
   }
   
在工厂类中采用反射虽然解决了随着新需求的出项就要创建新的工厂类的问题，但依然存在着另一个问题：在客户端代码中工厂类创建产品对象时，
产品对象相应的类写死了，如果产品类的路径以后发生了变化，那么就要重写这部分代码。这不符合软件工程中的开闭原则，因此我们可以采用反射和陪着文件相结合的方法
来解决此问题
		******
		******
		******
