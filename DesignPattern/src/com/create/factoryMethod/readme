如果创建的对象的初始化工作比较复杂，而且不同对象的创建又有很大的不同，此时采用简单工厂模式，这个工厂类就会变得非常庞大，
为了解决这个问题，就需要采用解耦的原则，将每一个对象的创建再单独分离出来，这就是工厂方法模式
		1.创建工厂接口
		2.子工厂实现工厂接口

另外一种使用工厂方法模式比较好的情况是：一个类在在使用另一个类的对象是，不知道这个对象如何实现时
此时，我们可以先定义一个抽象类，在该抽象类中定义一个要得到所需对象的抽象方法或先不实现工厂接口中的方法留待以后由其子类实现

		abstract class Factory
		{
			protect abstract Type getInstance();
			
			public T doSomething(para....)
			{
				Type instance = getInstance();
				
				//use instance do something
				
				return something;
			}
		}
工厂方法模式的问题：随着新需求的增加，子工厂也随着增加。因此，如果对象的创建和初始化没有什么大的不同，就没有必要时用工厂方法模式，直接使用简单工厂模式即可。

